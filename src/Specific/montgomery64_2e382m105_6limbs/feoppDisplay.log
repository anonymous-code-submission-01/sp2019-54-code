λ x : word64 * word64 * word64 * word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x9, x10, x8, x6, x4, x2)%core,
 uint64_t x12, uint8_t x13 = subborrow_u64(0x0, 0x0, x2);
 uint64_t x15, uint8_t x16 = subborrow_u64(x13, 0x0, x4);
 uint64_t x18, uint8_t x19 = subborrow_u64(x16, 0x0, x6);
 uint64_t x21, uint8_t x22 = subborrow_u64(x19, 0x0, x8);
 uint64_t x24, uint8_t x25 = subborrow_u64(x22, 0x0, x10);
 uint64_t x27, uint8_t x28 = subborrow_u64(x25, 0x0, x9);
 uint64_t x29 = cmovznz64(x28, 0x0, 0xffffffffffffffffL);
 uint64_t x30 = (x29 & 0xffffffffffffff97L);
 uint64_t x32, uint8_t x33 = addcarryx_u64(0x0, x12, x30);
 uint64_t x34 = (x29 & 0xffffffffffffffffL);
 uint64_t x36, uint8_t x37 = addcarryx_u64(x33, x15, x34);
 uint64_t x38 = (x29 & 0xffffffffffffffffL);
 uint64_t x40, uint8_t x41 = addcarryx_u64(x37, x18, x38);
 uint64_t x42 = (x29 & 0xffffffffffffffffL);
 uint64_t x44, uint8_t x45 = addcarryx_u64(x41, x21, x42);
 uint64_t x46 = (x29 & 0xffffffffffffffffL);
 uint64_t x48, uint8_t x49 = addcarryx_u64(x45, x24, x46);
 uint64_t x50 = (x29 & 0x3fffffffffffffff);
 uint64_t x52, uint8_t _ = addcarryx_u64(x49, x27, x50);
 (Return x52, Return x48, Return x44, Return x40, Return x36, Return x32))
x
     : word64 * word64 * word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)
