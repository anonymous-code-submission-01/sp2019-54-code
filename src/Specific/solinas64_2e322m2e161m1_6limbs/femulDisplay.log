λ x x0 : word64 * word64 * word64 * word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x12, x13, x11, x9, x7, x5, (x22, x23, x21, x19, x17, x15))%core,
 uint128_t x24 = ((0x2 * ((uint128_t)(x9 + x12) * (x19 + x22))) - (0x2 * ((uint128_t)x9 * x19)));
 uint128_t x25 = (((0x2 * ((uint128_t)(x7 + x13) * (x19 + x22))) + (0x2 * ((uint128_t)(x9 + x12) * (x17 + x23)))) - ((0x2 * ((uint128_t)x7 * x19)) + (0x2 * ((uint128_t)x9 * x17))));
 uint128_t x26 = ((((uint128_t)(x5 + x11) * (x19 + x22)) + (((uint128_t)(x7 + x13) * (x17 + x23)) + ((uint128_t)(x9 + x12) * (x15 + x21)))) - (((uint128_t)x5 * x19) + (((uint128_t)x7 * x17) + ((uint128_t)x9 * x15))));
 uint128_t x27 = ((((uint128_t)(x5 + x11) * (x17 + x23)) + ((uint128_t)(x7 + x13) * (x15 + x21))) - (((uint128_t)x5 * x17) + ((uint128_t)x7 * x15)));
 uint128_t x28 = (((uint128_t)(x5 + x11) * (x15 + x21)) - ((uint128_t)x5 * x15));
 uint128_t x29 = ((((0x2 * ((uint128_t)x9 * x19)) + (0x2 * ((uint128_t)x12 * x22))) + x27) + x24);
 uint128_t x30 = (((((0x2 * ((uint128_t)x7 * x19)) + (0x2 * ((uint128_t)x9 * x17))) + ((0x2 * ((uint128_t)x13 * x22)) + (0x2 * ((uint128_t)x12 * x23)))) + x28) + x25);
 uint128_t x31 = ((((uint128_t)x5 * x19) + (((uint128_t)x7 * x17) + ((uint128_t)x9 * x15))) + (((uint128_t)x11 * x22) + (((uint128_t)x13 * x23) + ((uint128_t)x12 * x21))));
 uint128_t x32 = (((((uint128_t)x5 * x17) + ((uint128_t)x7 * x15)) + (((uint128_t)x11 * x23) + ((uint128_t)x13 * x21))) + x24);
 uint128_t x33 = ((((uint128_t)x5 * x15) + ((uint128_t)x11 * x21)) + x25);
 uint64_t x34 = (uint64_t) (x31 >> 0x35);
 uint64_t x35 = ((uint64_t)x31 & 0x1fffffffffffff);
 uint64_t x36 = (uint64_t) (x26 >> 0x35);
 uint64_t x37 = ((uint64_t)x26 & 0x1fffffffffffff);
 uint128_t x38 = (((uint128_t)0x20000000000000 * x36) + x37);
 uint64_t x39 = (uint64_t) (x38 >> 0x35);
 uint64_t x40 = ((uint64_t)x38 & 0x1fffffffffffff);
 uint128_t x41 = ((x34 + x30) + x39);
 uint64_t x42 = (uint64_t) (x41 >> 0x36);
 uint64_t x43 = ((uint64_t)x41 & 0x3fffffffffffff);
 uint128_t x44 = (x33 + x39);
 uint64_t x45 = (uint64_t) (x44 >> 0x36);
 uint64_t x46 = ((uint64_t)x44 & 0x3fffffffffffff);
 uint128_t x47 = (x42 + x29);
 uint64_t x48 = (uint64_t) (x47 >> 0x36);
 uint64_t x49 = ((uint64_t)x47 & 0x3fffffffffffff);
 uint128_t x50 = (x45 + x32);
 uint64_t x51 = (uint64_t) (x50 >> 0x36);
 uint64_t x52 = ((uint64_t)x50 & 0x3fffffffffffff);
 uint64_t x53 = (x48 + x40);
 uint64_t x54 = (x53 >> 0x35);
 uint64_t x55 = (x53 & 0x1fffffffffffff);
 uint64_t x56 = (x51 + x35);
 uint64_t x57 = (x56 >> 0x35);
 uint64_t x58 = (x56 & 0x1fffffffffffff);
 uint64_t x59 = ((0x20000000000000 * x54) + x55);
 uint64_t x60 = (x59 >> 0x35);
 uint64_t x61 = (x59 & 0x1fffffffffffff);
 uint64_t x62 = ((x57 + x43) + x60);
 uint64_t x63 = (x62 >> 0x36);
 uint64_t x64 = (x62 & 0x3fffffffffffff);
 uint64_t x65 = (x46 + x60);
 uint64_t x66 = (x65 >> 0x36);
 uint64_t x67 = (x65 & 0x3fffffffffffff);
 return (Return x61, (x63 + x49), Return x64, Return x58, (x66 + x52), Return x67))
(x, x0)%core
     : word64 * word64 * word64 * word64 * word64 * word64 → word64 * word64 * word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)
