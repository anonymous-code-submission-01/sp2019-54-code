λ x : word64 * word64 * word64 * word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x9, x10, x8, x6, x4, x2)%core,
 uint64_t x11 = (x2 >> 0x2b);
 uint64_t x12 = (x2 & 0x7ffffffffff);
 uint64_t x13 = (x11 + x4);
 uint64_t x14 = (x13 >> 0x2a);
 uint64_t x15 = (x13 & 0x3ffffffffff);
 uint64_t x16 = (x14 + x6);
 uint64_t x17 = (x16 >> 0x2b);
 uint64_t x18 = (x16 & 0x7ffffffffff);
 uint64_t x19 = (x17 + x8);
 uint64_t x20 = (x19 >> 0x2a);
 uint64_t x21 = (x19 & 0x3ffffffffff);
 uint64_t x22 = (x20 + x10);
 uint64_t x23 = (x22 >> 0x2b);
 uint64_t x24 = (x22 & 0x7ffffffffff);
 uint64_t x25 = (x23 + x9);
 uint64_t x26 = (x25 >> 0x2a);
 uint64_t x27 = (x25 & 0x3ffffffffff);
 uint64_t x28 = (x12 + (0x13 * x26));
 uint64_t x29 = (x28 >> 0x2b);
 uint64_t x30 = (x28 & 0x7ffffffffff);
 uint64_t x31 = (x29 + x15);
 uint64_t x32 = (x31 >> 0x2a);
 uint64_t x33 = (x31 & 0x3ffffffffff);
 return (Return x27, Return x24, Return x21, (x32 + x18), Return x33, Return x30))
x
     : word64 * word64 * word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)
