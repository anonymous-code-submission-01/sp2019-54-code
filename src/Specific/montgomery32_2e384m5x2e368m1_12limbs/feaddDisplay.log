λ x x0 : word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x24, x25, x23, x21, x19, x17, x15, x13, x11, x9, x7, x5, (x46, x47, x45, x43, x41, x39, x37, x35, x33, x31, x29, x27))%core,
 uint32_t x49, uint8_t x50 = addcarryx_u32(0x0, x5, x27);
 uint32_t x52, uint8_t x53 = addcarryx_u32(x50, x7, x29);
 uint32_t x55, uint8_t x56 = addcarryx_u32(x53, x9, x31);
 uint32_t x58, uint8_t x59 = addcarryx_u32(x56, x11, x33);
 uint32_t x61, uint8_t x62 = addcarryx_u32(x59, x13, x35);
 uint32_t x64, uint8_t x65 = addcarryx_u32(x62, x15, x37);
 uint32_t x67, uint8_t x68 = addcarryx_u32(x65, x17, x39);
 uint32_t x70, uint8_t x71 = addcarryx_u32(x68, x19, x41);
 uint32_t x73, uint8_t x74 = addcarryx_u32(x71, x21, x43);
 uint32_t x76, uint8_t x77 = addcarryx_u32(x74, x23, x45);
 uint32_t x79, uint8_t x80 = addcarryx_u32(x77, x25, x47);
 uint32_t x82, uint8_t x83 = addcarryx_u32(x80, x24, x46);
 uint32_t x85, uint8_t x86 = subborrow_u32(0x0, x49, 0xffffffff);
 uint32_t x88, uint8_t x89 = subborrow_u32(x86, x52, 0xffffffff);
 uint32_t x91, uint8_t x92 = subborrow_u32(x89, x55, 0xffffffff);
 uint32_t x94, uint8_t x95 = subborrow_u32(x92, x58, 0xffffffff);
 uint32_t x97, uint8_t x98 = subborrow_u32(x95, x61, 0xffffffff);
 uint32_t x100, uint8_t x101 = subborrow_u32(x98, x64, 0xffffffff);
 uint32_t x103, uint8_t x104 = subborrow_u32(x101, x67, 0xffffffff);
 uint32_t x106, uint8_t x107 = subborrow_u32(x104, x70, 0xffffffff);
 uint32_t x109, uint8_t x110 = subborrow_u32(x107, x73, 0xffffffff);
 uint32_t x112, uint8_t x113 = subborrow_u32(x110, x76, 0xffffffff);
 uint32_t x115, uint8_t x116 = subborrow_u32(x113, x79, 0xffffffff);
 uint32_t x118, uint8_t x119 = subborrow_u32(x116, x82, 0xfffaffff);
 uint32_t _, uint8_t x122 = subborrow_u32(x119, x83, 0x0);
 uint32_t x123 = cmovznz32(x122, x118, x82);
 uint32_t x124 = cmovznz32(x122, x115, x79);
 uint32_t x125 = cmovznz32(x122, x112, x76);
 uint32_t x126 = cmovznz32(x122, x109, x73);
 uint32_t x127 = cmovznz32(x122, x106, x70);
 uint32_t x128 = cmovznz32(x122, x103, x67);
 uint32_t x129 = cmovznz32(x122, x100, x64);
 uint32_t x130 = cmovznz32(x122, x97, x61);
 uint32_t x131 = cmovznz32(x122, x94, x58);
 uint32_t x132 = cmovznz32(x122, x91, x55);
 uint32_t x133 = cmovznz32(x122, x88, x52);
 uint32_t x134 = cmovznz32(x122, x85, x49);
 return (x123, x124, x125, x126, x127, x128, x129, x130, x131, x132, x133, x134))
(x, x0)%core
     : word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 → word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 → ReturnType (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)
