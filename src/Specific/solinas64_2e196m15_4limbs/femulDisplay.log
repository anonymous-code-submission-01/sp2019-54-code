λ x x0 : word64 * word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x8, x9, x7, x5, (x14, x15, x13, x11))%core,
 uint128_t x16 = (((uint128_t)x5 * x14) + (((uint128_t)x7 * x15) + (((uint128_t)x9 * x13) + ((uint128_t)x8 * x11))));
 uint128_t x17 = ((((uint128_t)x5 * x15) + (((uint128_t)x7 * x13) + ((uint128_t)x9 * x11))) + (0xf * ((uint128_t)x8 * x14)));
 uint128_t x18 = ((((uint128_t)x5 * x13) + ((uint128_t)x7 * x11)) + (0xf * (((uint128_t)x9 * x14) + ((uint128_t)x8 * x15))));
 uint128_t x19 = (((uint128_t)x5 * x11) + (0xf * (((uint128_t)x7 * x14) + (((uint128_t)x9 * x15) + ((uint128_t)x8 * x13)))));
 uint64_t x20 = (uint64_t) (x19 >> 0x31);
 uint64_t x21 = ((uint64_t)x19 & 0x1ffffffffffff);
 uint128_t x22 = (x20 + x18);
 uint64_t x23 = (uint64_t) (x22 >> 0x31);
 uint64_t x24 = ((uint64_t)x22 & 0x1ffffffffffff);
 uint128_t x25 = (x23 + x17);
 uint64_t x26 = (uint64_t) (x25 >> 0x31);
 uint64_t x27 = ((uint64_t)x25 & 0x1ffffffffffff);
 uint128_t x28 = (x26 + x16);
 uint64_t x29 = (uint64_t) (x28 >> 0x31);
 uint64_t x30 = ((uint64_t)x28 & 0x1ffffffffffff);
 uint64_t x31 = (x21 + (0xf * x29));
 uint64_t x32 = (x31 >> 0x31);
 uint64_t x33 = (x31 & 0x1ffffffffffff);
 uint64_t x34 = (x32 + x24);
 uint64_t x35 = (x34 >> 0x31);
 uint64_t x36 = (x34 & 0x1ffffffffffff);
 return (Return x30, (x35 + x27), Return x36, Return x33))
(x, x0)%core
     : word64 * word64 * word64 * word64 → word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t)
