λ x x0 : word64 * word64 * word64 * word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x12, x13, x11, x9, x7, x5, (x22, x23, x21, x19, x17, x15))%core,
 uint64_t x25, uint8_t x26 = subborrow_u64(0x0, x5, x15);
 uint64_t x28, uint8_t x29 = subborrow_u64(x26, x7, x17);
 uint64_t x31, uint8_t x32 = subborrow_u64(x29, x9, x19);
 uint64_t x34, uint8_t x35 = subborrow_u64(x32, x11, x21);
 uint64_t x37, uint8_t x38 = subborrow_u64(x35, x13, x23);
 uint64_t x40, uint8_t x41 = subborrow_u64(x38, x12, x22);
 uint64_t x42 = cmovznz64(x41, 0x0, 0xffffffffffffffffL);
 uint64_t x43 = (x42 & 0xffffffffffffffedL);
 uint64_t x45, uint8_t x46 = addcarryx_u64(0x0, x25, x43);
 uint64_t x47 = (x42 & 0xffffffffffffffffL);
 uint64_t x49, uint8_t x50 = addcarryx_u64(x46, x28, x47);
 uint64_t x51 = (x42 & 0xffffffffffffffffL);
 uint64_t x53, uint8_t x54 = addcarryx_u64(x50, x31, x51);
 uint64_t x55 = (x42 & 0xffffffffffffffffL);
 uint64_t x57, uint8_t x58 = addcarryx_u64(x54, x34, x55);
 uint64_t x59 = (x42 & 0xffffffffffffffffL);
 uint64_t x61, uint8_t x62 = addcarryx_u64(x58, x37, x59);
 uint64_t x63 = (x42 & 0x7ffffffffffffff);
 uint64_t x65, uint8_t _ = addcarryx_u64(x62, x40, x63);
 (Return x65, Return x61, Return x57, Return x53, Return x49, Return x45))
(x, x0)%core
     : word64 * word64 * word64 * word64 * word64 * word64 → word64 * word64 * word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)
