λ x x0 : word32 * word32 * word32 * word32 * word32 * word32 * word32,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x14, x15, x13, x11, x9, x7, x5, (x26, x27, x25, x23, x21, x19, x17))%core,
 uint64_t x28 = (((uint64_t)x5 * x26) + (((uint64_t)x7 * x27) + (((uint64_t)x9 * x25) + (((uint64_t)x11 * x23) + (((uint64_t)x13 * x21) + (((uint64_t)x15 * x19) + ((uint64_t)x14 * x17)))))));
 uint64_t x29 = ((((uint64_t)x5 * x27) + (((uint64_t)x7 * x25) + (((uint64_t)x9 * x23) + (((uint64_t)x11 * x21) + (((uint64_t)x13 * x19) + ((uint64_t)x15 * x17)))))) + (0x19 * ((uint64_t)x14 * x26)));
 uint64_t x30 = ((((uint64_t)x5 * x25) + (((uint64_t)x7 * x23) + (((uint64_t)x9 * x21) + (((uint64_t)x11 * x19) + ((uint64_t)x13 * x17))))) + (0x19 * (((uint64_t)x15 * x26) + ((uint64_t)x14 * x27))));
 uint64_t x31 = ((((uint64_t)x5 * x23) + (((uint64_t)x7 * x21) + (((uint64_t)x9 * x19) + ((uint64_t)x11 * x17)))) + (0x19 * (((uint64_t)x13 * x26) + (((uint64_t)x15 * x27) + ((uint64_t)x14 * x25)))));
 ℤ x32 = ((((uint64_t)x5 * x21) + (((uint64_t)x7 * x19) + ((uint64_t)x9 * x17))) +ℤ (0x19 *ℤ (((uint64_t)x11 * x26) + (((uint64_t)x13 * x27) + (((uint64_t)x15 * x25) + ((uint64_t)x14 * x23))))));
 ℤ x33 = ((((uint64_t)x5 * x19) + ((uint64_t)x7 * x17)) +ℤ (0x19 *ℤ (((uint64_t)x9 * x26) + (((uint64_t)x11 * x27) + (((uint64_t)x13 * x25) + (((uint64_t)x15 * x23) + ((uint64_t)x14 * x21)))))));
 ℤ x34 = (((uint64_t)x5 * x17) +ℤ (0x19 *ℤ (((uint64_t)x7 * x26) + (((uint64_t)x9 * x27) + (((uint64_t)x11 * x25) + (((uint64_t)x13 * x23) + (((uint64_t)x15 * x21) + ((uint64_t)x14 * x19))))))));
 uint64_t x35 = (x34 >> 0x1b);
 uint32_t x36 = (x34 & 0x7ffffff);
 ℤ x37 = (x35 +ℤ x33);
 uint64_t x38 = (x37 >> 0x1b);
 uint32_t x39 = (x37 & 0x7ffffff);
 ℤ x40 = (x38 +ℤ x32);
 uint64_t x41 = (x40 >> 0x1b);
 uint32_t x42 = (x40 & 0x7ffffff);
 uint64_t x43 = (x41 + x31);
 uint64_t x44 = (x43 >> 0x1b);
 uint32_t x45 = ((uint32_t)x43 & 0x7ffffff);
 uint64_t x46 = (x44 + x30);
 uint64_t x47 = (x46 >> 0x1b);
 uint32_t x48 = ((uint32_t)x46 & 0x7ffffff);
 uint64_t x49 = (x47 + x29);
 uint64_t x50 = (x49 >> 0x1b);
 uint32_t x51 = ((uint32_t)x49 & 0x7ffffff);
 uint64_t x52 = (x50 + x28);
 uint64_t x53 = (x52 >> 0x1b);
 uint32_t x54 = ((uint32_t)x52 & 0x7ffffff);
 uint64_t x55 = (x36 + (0x19 * x53));
 uint32_t x56 = (uint32_t) (x55 >> 0x1b);
 uint32_t x57 = ((uint32_t)x55 & 0x7ffffff);
 uint32_t x58 = (x56 + x39);
 uint32_t x59 = (x58 >> 0x1b);
 uint32_t x60 = (x58 & 0x7ffffff);
 return (Return x54, Return x51, Return x48, Return x45, (x59 + x42), Return x60, Return x57))
(x, x0)%core
     : word32 * word32 * word32 * word32 * word32 * word32 * word32 → word32 * word32 * word32 * word32 * word32 * word32 * word32 → ReturnType (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)
