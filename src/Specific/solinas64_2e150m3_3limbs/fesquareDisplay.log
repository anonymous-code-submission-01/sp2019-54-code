λ x : word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x3, x4, x2)%core,
 uint128_t x5 = (((uint128_t)x2 * x3) + (((uint128_t)x4 * x4) + ((uint128_t)x3 * x2)));
 uint128_t x6 = ((((uint128_t)x2 * x4) + ((uint128_t)x4 * x2)) + (0x3 * ((uint128_t)x3 * x3)));
 uint128_t x7 = (((uint128_t)x2 * x2) + (0x3 * (((uint128_t)x4 * x3) + ((uint128_t)x3 * x4))));
 uint64_t x8 = (uint64_t) (x7 >> 0x32);
 uint64_t x9 = ((uint64_t)x7 & 0x3ffffffffffff);
 uint128_t x10 = (x8 + x6);
 uint64_t x11 = (uint64_t) (x10 >> 0x32);
 uint64_t x12 = ((uint64_t)x10 & 0x3ffffffffffff);
 uint128_t x13 = (x11 + x5);
 uint64_t x14 = (uint64_t) (x13 >> 0x32);
 uint64_t x15 = ((uint64_t)x13 & 0x3ffffffffffff);
 uint64_t x16 = (x9 + (0x3 * x14));
 uint64_t x17 = (x16 >> 0x32);
 uint64_t x18 = (x16 & 0x3ffffffffffff);
 uint64_t x19 = (x17 + x12);
 uint64_t x20 = (x19 >> 0x32);
 uint64_t x21 = (x19 & 0x3ffffffffffff);
 return ((x20 + x15), Return x21, Return x18))
x
     : word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t)
