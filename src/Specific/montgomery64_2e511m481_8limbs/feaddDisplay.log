λ x x0 : word64 * word64 * word64 * word64 * word64 * word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x16, x17, x15, x13, x11, x9, x7, x5, (x30, x31, x29, x27, x25, x23, x21, x19))%core,
 uint64_t x33, uint8_t x34 = addcarryx_u64(0x0, x5, x19);
 uint64_t x36, uint8_t x37 = addcarryx_u64(x34, x7, x21);
 uint64_t x39, uint8_t x40 = addcarryx_u64(x37, x9, x23);
 uint64_t x42, uint8_t x43 = addcarryx_u64(x40, x11, x25);
 uint64_t x45, uint8_t x46 = addcarryx_u64(x43, x13, x27);
 uint64_t x48, uint8_t x49 = addcarryx_u64(x46, x15, x29);
 uint64_t x51, uint8_t x52 = addcarryx_u64(x49, x17, x31);
 uint64_t x54, uint8_t x55 = addcarryx_u64(x52, x16, x30);
 uint64_t x57, uint8_t x58 = subborrow_u64(0x0, x33, 0xfffffffffffffe1fL);
 uint64_t x60, uint8_t x61 = subborrow_u64(x58, x36, 0xffffffffffffffffL);
 uint64_t x63, uint8_t x64 = subborrow_u64(x61, x39, 0xffffffffffffffffL);
 uint64_t x66, uint8_t x67 = subborrow_u64(x64, x42, 0xffffffffffffffffL);
 uint64_t x69, uint8_t x70 = subborrow_u64(x67, x45, 0xffffffffffffffffL);
 uint64_t x72, uint8_t x73 = subborrow_u64(x70, x48, 0xffffffffffffffffL);
 uint64_t x75, uint8_t x76 = subborrow_u64(x73, x51, 0xffffffffffffffffL);
 uint64_t x78, uint8_t x79 = subborrow_u64(x76, x54, 0x7fffffffffffffffL);
 uint64_t _, uint8_t x82 = subborrow_u64(x79, x55, 0x0);
 uint64_t x83 = cmovznz64(x82, x78, x54);
 uint64_t x84 = cmovznz64(x82, x75, x51);
 uint64_t x85 = cmovznz64(x82, x72, x48);
 uint64_t x86 = cmovznz64(x82, x69, x45);
 uint64_t x87 = cmovznz64(x82, x66, x42);
 uint64_t x88 = cmovznz64(x82, x63, x39);
 uint64_t x89 = cmovznz64(x82, x60, x36);
 uint64_t x90 = cmovznz64(x82, x57, x33);
 return (x83, x84, x85, x86, x87, x88, x89, x90))
(x, x0)%core
     : word64 * word64 * word64 * word64 * word64 * word64 * word64 * word64 → word64 * word64 * word64 * word64 * word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)
