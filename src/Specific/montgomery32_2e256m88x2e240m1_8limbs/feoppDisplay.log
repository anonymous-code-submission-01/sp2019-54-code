λ x : word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x13, x14, x12, x10, x8, x6, x4, x2)%core,
 uint32_t x16, uint8_t x17 = subborrow_u32(0x0, 0x0, x2);
 uint32_t x19, uint8_t x20 = subborrow_u32(x17, 0x0, x4);
 uint32_t x22, uint8_t x23 = subborrow_u32(x20, 0x0, x6);
 uint32_t x25, uint8_t x26 = subborrow_u32(x23, 0x0, x8);
 uint32_t x28, uint8_t x29 = subborrow_u32(x26, 0x0, x10);
 uint32_t x31, uint8_t x32 = subborrow_u32(x29, 0x0, x12);
 uint32_t x34, uint8_t x35 = subborrow_u32(x32, 0x0, x14);
 uint32_t x37, uint8_t x38 = subborrow_u32(x35, 0x0, x13);
 uint32_t x39 = cmovznz32(x38, 0x0, 0xffffffff);
 uint32_t x40 = (x39 & 0xffffffff);
 uint32_t x42, uint8_t x43 = addcarryx_u32(0x0, x16, x40);
 uint32_t x44 = (x39 & 0xffffffff);
 uint32_t x46, uint8_t x47 = addcarryx_u32(x43, x19, x44);
 uint32_t x48 = (x39 & 0xffffffff);
 uint32_t x50, uint8_t x51 = addcarryx_u32(x47, x22, x48);
 uint32_t x52 = (x39 & 0xffffffff);
 uint32_t x54, uint8_t x55 = addcarryx_u32(x51, x25, x52);
 uint32_t x56 = (x39 & 0xffffffff);
 uint32_t x58, uint8_t x59 = addcarryx_u32(x55, x28, x56);
 uint32_t x60 = (x39 & 0xffffffff);
 uint32_t x62, uint8_t x63 = addcarryx_u32(x59, x31, x60);
 uint32_t x64 = (x39 & 0xffffffff);
 uint32_t x66, uint8_t x67 = addcarryx_u32(x63, x34, x64);
 uint32_t x68 = (x39 & 0xffa7ffff);
 uint32_t x70, uint8_t _ = addcarryx_u32(x67, x37, x68);
 (Return x70, Return x66, Return x62, Return x58, Return x54, Return x50, Return x46, Return x42))
x
     : word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 → ReturnType (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)
